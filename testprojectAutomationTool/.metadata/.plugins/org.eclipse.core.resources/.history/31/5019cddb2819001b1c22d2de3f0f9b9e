package collectionsconcept;


import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class SiteStats {
    private String url;
    private int numVisits;

    /**
     * Constructor for the SiteStats class
     * 
     * @param url
     *            String that represents an URL that the user has visited
     * @param numVisits
     *            An int that represents the number of times that the user has
     *            visited the url
     */
    public SiteStats(String url, int numVisits) {
        this.url = url;
        this.numVisits = numVisits;
    }

    /**
     * This method returns the number of times that the user has visited the url.
     * 
     * @return An int that represents the number of times that the user has visited
     *         the url
     */
    public int getNumVisits() {
        return this.numVisits;
    }

    /**
     * This method returns the url that we are currently tracking
     * 
     * @return A String that represents the url that we are currently tracking
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * This method updates the number of times that we have visited the url
     * 
     * @param an
     *            int that represents the number that we want to set numVisits to
     */
    public void setNumVisits(int updatedNumVisits) {
        this.numVisits = updatedNumVisits;
    }

    public String toString() {
        return this.url + " | " + this.numVisits;
    }

}

public class PartBSolution {

    private static Queue<SiteStats> sites = new LinkedList<SiteStats>();


    // Main method to list top n visited sites
    public static void listTopVisitedSites(Queue<SiteStats> sites, int n) {
       int size= sites.size();

       if (size > 0)
       {
           System.out.println(sites);
           sort_sites(sites);
       }

        System.out.println(sites);
    }

    public static void sort_sites(Queue<SiteStats> sites)
    {
        for(int i = 1; i <= sites.size(); i++)
        {
            int min_index = minIndex(sites,sites.size() - i);
            insertMinToRear(sites, min_index);
        }
    }

    public static int minIndex(Queue<SiteStats> sites,
                               int sortIndex)
    {
        int min_index = -1;
        int min_value = Integer.MIN_VALUE;
        int s = sites.size();
        for (int i = 0; i < s; i++)
        {
            SiteStats s1 = sites.peek();
            int current = s1.getNumVisits();

            // This is dequeue() in Java STL
            sites.poll();

            // we add the condition i <= sortIndex
            // because we don't want to traverse
            // on the sorted part of the queue,
            // which is the right part.
            if (current > min_value && i <= sortIndex)
            {
                min_index = i;
                min_value = current;
            }
            sites.add(s1);
        }
        return min_index;
    }


    public static void insertMinToRear(Queue<SiteStats> sites,
                                       int min_index)
    {
        SiteStats s2=sites.peek();
        int s = sites.size();
        for (int i = 0; i < s; i++)
        {
            SiteStats s1 = sites.peek();
            int current = s1.getNumVisits();
            sites.poll();
            if (i != min_index)
                sites.add(s1);
            else
                s2=s1;
        }
        sites.add(s2);
    }

    // Method to find the website in the queue and increment the visited count by 1, adding new node in case website is not found
    public static void updateCount(String url) {
        int count =0;
        int i=0;

        if(sites.isEmpty())
            sites.add(new SiteStats(url,1));
        else
        {
            i=0;
            int size= sites.size();
            for(SiteStats s1 : sites) {
                if (s1.getUrl().equals(url)) {
                    int number = s1.getNumVisits();
                    s1.setNumVisits(number + 1);
                    count=1;
                    break;
                }

                else
                    i++;
            }

            if(count==0)
            {
                sites.add(new SiteStats(url,1));
            }

            String url1= sites.peek().getUrl();
            //System.out.println(url1);
          /* while(!url1.equals(url))
           {
               //System.out.println(sites);
               sites.add(sites.poll());
               url1=sites.peek().getUrl();
              // System.out.println(sites);
           }

            System.out.println(sites);

           */

           //rearrange_queue(sites,count,i);

        }
        
    }

    public static void rearrange_queue (Queue<SiteStats> sites, int count,int i)
    {
        int count1 =i+1;
        int size = sites.size();
        if(count==0)
        {
            for(int j=1;j<=size-1;j++)
                sites.add(sites.poll());
        }

        else
        {
            for(int j=1;j<=size;j++)
            {
                if(j!=count1)
                    sites.add(sites.poll());
            }
        }
    }

    public static void main(String[] args) {
        String[] visitedSites = { "www.google.co.in", "www.google.co.in", "www.facebook.com", "www.upgrad.com", "www.google.co.in", "www.youtube.com",
                "www.facebook.com", "www.upgrad.com", "www.facebook.com", "www.google.co.in", "www.microsoft.com", "www.9gag.com", "www.netflix.com",
                "www.netflix.com", "www.9gag.com", "www.microsoft.com", "www.amazon.com", "www.amazon.com", "www.uber.com", "www.amazon.com",
                "www.microsoft.com", "www.upgrad.com"
                };

        for (String url : visitedSites) {
            updateCount(url);
            listTopVisitedSites(sites, 5);

        }
        
    }

}
